
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__adaptor_d_h__ADAPTOR_MARSHAL_H
#define __dbusxx__adaptor_d_h__ADAPTOR_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace com {
namespace example {

class UpdateList_adaptor: public ::DBus::InterfaceAdaptor
{
public:

    UpdateList_adaptor()
    : ::DBus::InterfaceAdaptor("com.example.UpdateList")
    {
        register_method(UpdateList_adaptor, AddClient, _AddClient_stub);
        register_method(UpdateList_adaptor, RemoveClient, _RemoveClient_stub);
        register_method(UpdateList_adaptor, UpdateMenuList, _UpdateMenuList_stub);
        register_method(UpdateList_adaptor, GetClientListSize, _GetClientListSize_stub);
        register_method(UpdateList_adaptor, GetMenuListSize, _GetMenuListSize_stub);
        register_method(UpdateList_adaptor, GetClientInfo, _GetClientInfo_stub);
        register_method(UpdateList_adaptor, GetMenuInfo, _GetMenuInfo_stub);
    }

    virtual ~ UpdateList_adaptor(){}

    ::DBus::IntrospectedInterface *introspect() const 
    {
        static ::DBus::IntrospectedArgument AddClient_args[] = 
        {
            { "info", "(si)", true },
            { "ret", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument RemoveClient_args[] = 
        {
            { "name", "s", true },
            { "passcode", "i", true },
            { "ret", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument UpdateMenuList_args[] = 
        {
            { "password", "i", true },
            { "elements", "(iiss)", true },
            { "ret", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetClientListSize_args[] = 
        {
            { "ret", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetMenuListSize_args[] = 
        {
            { "ret", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetClientInfo_args[] = 
        {
            { "ret", "(si)", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetMenuInfo_args[] = 
        {
            { "ret", "(iiss)", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod UpdateList_adaptor_methods[] = 
        {
            { "AddClient", AddClient_args },
            { "RemoveClient", RemoveClient_args },
            { "UpdateMenuList", UpdateMenuList_args },
            { "GetClientListSize", GetClientListSize_args },
            { "GetMenuListSize", GetMenuListSize_args },
            { "GetClientInfo", GetClientInfo_args },
            { "GetMenuInfo", GetMenuInfo_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod UpdateList_adaptor_signals[] = 
        {
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty UpdateList_adaptor_properties[] = 
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface UpdateList_adaptor_interface = 
        {
            "com.example.UpdateList",
            UpdateList_adaptor_methods,
            UpdateList_adaptor_signals,
            UpdateList_adaptor_properties
        };
        return &UpdateList_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual int32_t AddClient(const ::DBus::Struct< std::string, int32_t >& info) = 0;
    virtual int32_t RemoveClient(const std::string& name, const int32_t& passcode) = 0;
    virtual int32_t UpdateMenuList(const int32_t& password, const ::DBus::Struct< int32_t, int32_t, std::string, std::string >& elements) = 0;
    virtual int32_t GetClientListSize() = 0;
    virtual int32_t GetMenuListSize() = 0;
    virtual ::DBus::Struct< std::string, int32_t > GetClientInfo() = 0;
    virtual ::DBus::Struct< int32_t, int32_t, std::string, std::string > GetMenuInfo() = 0;

public:

    /* signal emitters for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _AddClient_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::Struct< std::string, int32_t > argin1; ri >> argin1;
        int32_t argout1 = AddClient(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _RemoveClient_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        int32_t argin2; ri >> argin2;
        int32_t argout1 = RemoveClient(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _UpdateMenuList_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        int32_t argin1; ri >> argin1;
        ::DBus::Struct< int32_t, int32_t, std::string, std::string > argin2; ri >> argin2;
        int32_t argout1 = UpdateMenuList(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _GetClientListSize_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        int32_t argout1 = GetClientListSize();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _GetMenuListSize_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        int32_t argout1 = GetMenuListSize();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _GetClientInfo_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::Struct< std::string, int32_t > argout1 = GetClientInfo();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _GetMenuInfo_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::Struct< int32_t, int32_t, std::string, std::string > argout1 = GetMenuInfo();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
};

} } 
#endif //__dbusxx__adaptor_d_h__ADAPTOR_MARSHAL_H
